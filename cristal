package cristales;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import static org.opencv.imgcodecs.Imgcodecs.imread;
import org.opencv.imgproc.Imgproc;
import static cristales.funciones.imshow;
import java.util.ArrayList;
import java.util.List;
import org.opencv.core.CvType;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.RotatedRect;
import org.opencv.core.Scalar;

public class Cristales {
    public static void main(String[] args) {
        
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
     
        Mat im = imread("resources\\7.jpeg");
        Mat imColor = new Mat();
        Mat imBw = new Mat();
        Mat notimBw = new Mat();
        Mat imClose = new Mat();
        Mat mask = Mat.ones(10,10, CvType.CV_32F);
        
        double maxVal = 0;
        int maxValId = 0;
        
        double ang = 0;
        
        Imgproc.cvtColor(im,imColor,Imgproc.COLOR_BGR2GRAY);
        Imgproc.threshold(imColor, imBw, 100, 255, Imgproc.THRESH_BINARY);
        Core.bitwise_not(imBw, notimBw);
        Imgproc.morphologyEx(notimBw, imClose, Imgproc.MORPH_CLOSE, mask);
        
        List<MatOfPoint> contornos = new ArrayList<>();
        Imgproc.findContours(imClose, contornos, new Mat(), Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);
        for(int i=0;i<contornos.size();i++){
            double area = Imgproc.contourArea(contornos.get(i));
            if (maxVal < area) {
                maxVal = area;
                maxValId = i;
            }
        }   
        Imgproc.drawContours(im, contornos, maxValId, new Scalar(0, 255, 0),10);
                
        RotatedRect bounding = Imgproc.minAreaRect(new MatOfPoint2f(contornos.get(maxValId).toArray()));
        //System.out.println(bounding.size.height);
        //System.out.println(bounding.size.width);
        //Imgproc.line(im, new Point(bounding.center.x-bounding.size.height/2,bounding.center.y), new Point(bounding.center.x+bounding.size.height/2,bounding.center.y), new Scalar(0, 0, 255),10);
        //Imgproc.line(im, new Point(bounding.center.x,bounding.center.y-bounding.size.height/2), new Point(bounding.center.x,bounding.center.y+bounding.size.height/2), new Scalar(0, 0, 255),10);      
        //Imgproc.rectangle(im, new Point(bounding.center.x-bounding.size.height/2,bounding.center.y-bounding.size.width/2), new Point(bounding.center.x+bounding.size.height/2,bounding.center.y+bounding.size.width/2), new Scalar(255, 0, 0),10);
        //System.out.println(bounding.angle);
        if(bounding.size.width<bounding.size.height){
            ang = bounding.angle-90;
        }else{
            ang = bounding.angle;
        }
        
        //System.out.println(bounding.angle);
        //System.out.println(bounding.size.width);
        //System.out.println(bounding.size.height);
        //imshow(im);
        Mat points = new Mat();
        Imgproc.boxPoints(bounding, points);
        System.out.println(points.dump());
        double x = points.get(3,0)[0] - points.get(2,0)[0] ;
        double y = points.get(3,1)[0] - points.get(2,1)[0] ;
        double radiansAux = Math.atan(y/x);
        double degreesAux = Math.toDegrees(radiansAux);
        System.out.println(degreesAux);
        //Imgproc.rectangle(im, new Point(0,0),new Point(100,100), new Scalar(255, 0, 0),10);
        Imgproc.line(im, new Point(points.get(0,0)[0],points.get(0,1)[0]), new Point(points.get(2,0)[0],points.get(2,1)[0]), new Scalar(255, 0, 0),10);
        Imgproc.line(im, new Point(points.get(1,0)[0],points.get(1,1)[0]), new Point(points.get(3,0)[0],points.get(3,1)[0]), new Scalar(0, 255, 255),10);
        imshow(im);
        
    }
    
}
